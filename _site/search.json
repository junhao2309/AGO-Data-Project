[
  {
    "objectID": "AGO_Prelim.html",
    "href": "AGO_Prelim.html",
    "title": "AGO_Prelim",
    "section": "",
    "text": "library(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(crosstalk)\nlibrary(plotly)\n\n\nprocurement_data &lt;- read_csv(\"Data_file.csv\")\n\n\nprocurement_data[c(1,6999,7000), c(1,2,6)]\n\n# A tibble: 3 × 3\n  `S/N` `Procurement Code` `Date of Award (2017-2022)`\n  &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                      \n1     1 ITQ20160157        1/7/2016                   \n2  6999 ITT20230691        15/8/2023                  \n3  7000 ITT20240605        29/8/2024"
  },
  {
    "objectID": "AGO_Prelim.html#understanding-the-dataset",
    "href": "AGO_Prelim.html#understanding-the-dataset",
    "title": "AGO_Prelim",
    "section": "2.1 Understanding the Dataset",
    "text": "2.1 Understanding the Dataset\n\nChecking for Duplicate entries\n\n\nany(duplicated(procurement_data$`Procurement Code`))\n\n[1] FALSE\n\n\nProcurement Code does not have duplicated entries and has an assigned unique identifier to the transaction made.\n\nAgencyProcurement DescriptionSupplier\n\n\nThis showcases the number of Government agencies and Statutory Boards within this dataset.\n\nunique(procurement_data$Agency)\n\n [1] \"National Institute of Scientific Advancement\"            \n [2] \"Office of International Relations and Diplomatic Affairs\"\n [3] \"Ministry of Strategic Economic Planning\"                 \n [4] \"Agency for Cultural Preservation and Heritage\"           \n [5] \"Department of Public Health and Disease Control\"         \n [6] \"Institute for Social Justice and Equality\"               \n [7] \"Department of Advanced Technological Research\"           \n [8] \"Office of Public Safety and Emergency Management\"        \n [9] \"National Commission for Space Exploration\"               \n[10] \"National Cybersecurity Task Force\"                       \n[11] \"Bureau of Urban Development and Infrastructure\"          \n[12] \"Department of Energy Conservation and Sustainability\"    \n[13] \"Bureau of National Security and Intelligence\"            \n[14] \"Commission for Ethical Governance\"                       \n[15] \"Federal Agency for Environmental Protection\"             \n\n\nThere are a total of 15 agencies under this dataset.\n\n\nThis showcases how procurement purposes are being categorized.\n\nunique(procurement_data$`Procurement Description`)\n\n [1] \"Parking management and traffic control solutions.\"             \n [2] \"Space planning and utilization optimization strategies.\"       \n [3] \"Health and safety compliance management and training.\"         \n [4] \"Waste management and recycling program implementation.\"        \n [5] \"Emergency response and disaster recovery planning.\"            \n [6] \"Pest control services for a pest-free environment.\"            \n [7] \"Energy-efficient lighting installation and maintenance.\"       \n [8] \"Indoor air quality monitoring and improvement measures.\"       \n [9] \"Building maintenance and repairs.\"                             \n[10] \"Building automation and smart technology integration.\"         \n[11] \"Cleaning supplies and consumables procurement and management.\" \n[12] \"Furniture and equipment maintenance and inventory tracking.\"   \n[13] \"Fire safety system installation and maintenance.\"              \n[14] \"HVAC system maintenance and climate control optimization.\"     \n[15] \"Tenant communication and customer service assistance.\"         \n[16] \"Comprehensive janitorial services and cleanliness maintenance.\"\n[17] \"Expert landscaping and groundskeeping solutions.\"              \n[18] \"24/7 security and access control management.\"                  \n[19] \"Renovation and remodeling project management.\"                 \n[20] \"Energy-efficient systems and consumption monitoring.\"          \n\n\nThere are a total of 20 categories of reasons for why procurement was made.\n\n\nThis showcases the catalogue of suppliers agencies may refer to for procurement\n\nunique(procurement_data$Supplier)\n\n [1] \"SafeHaven Maintenance\"            \"TrueView Management\"             \n [3] \"CleanHarbor Facility Care\"        \"EverPrime Property Management\"   \n [5] \"UrbanTech Management\"             \"GrandReach Facility Care\"        \n [7] \"GoldenHarbor Management\"          \"TrueWave Facilities Management\"  \n [9] \"CleanSweep Property Management\"   \"SkyHigh Property Management\"     \n[11] \"GrandView Facilities Group\"       \"EliteTech Property Support\"      \n[13] \"SwiftGuard Management\"            \"HorizonPro Facility Management\"  \n[15] \"InfiniteSpace Building Solutions\" \"AlphaCrest Property Support\"     \n[17] \"Xtreme Maintenance\"               \"StarStone Facility Services\"     \n[19] \"UrbanGuard Facilities\"            \"InfiniteGuard Building Care\"     \n[21] \"UrbanEagle Maintenance\"           \"SilverTech Facilities Masters\"   \n[23] \"ApexGuard Facility Services\"      \"EverPro Property Support\"        \n[25] \"TruePro Building Experts\"         \"SafeReach Property Solutions\"    \n[27] \"BlueBreeze Facility Solutions\"    \"GoldenGate Facility Masters\"     \n[29] \"Reliable Facility Services\"       \"GreenPrime Facilities Group\"     \n[31] \"SkyHarbor Facility Experts\"       \"BlueCrest Facility Support\"      \n[33] \"AlphaPro Facility Solutions\"      \"HighWave Building Solutions\"     \n[35] \"TrustEdge Building Maintenance\"   \"BlueSky Property Care\"           \n[37] \"SkyStone Property Solutions\"      \"GreenLine Building Experts\"      \n[39] \"UrbanEdge Maintenance\"            \"HorizonHarbor Property Services\" \n[41] \"SafeEdge Property Care\"           \"AlphaWave Property Solutions\"    \n[43] \"InfiniteTech Building Solutions\"  \"GrandPro Facilities Support\"     \n[45] \"GoldenReach Property Management\"  \"SafeHarbor Facilities Group\"     \n[47] \"SecureSpace Management\"           \"FreshEdge Facility Support\"      \n[49] \"BlueSail Property Experts\"        \"HorizonView Property Management\" \n[51] \"TrustPro Building Maintenance\"    \"StarHarbor Facilities Group\"     \n[53] \"SilverReach Facility Services\"    \"GreenWave Facilities Management\" \n[55] \"AlphaStone Property Support\"      \"AlphaTech Facilities Management\" \n[57] \"MaxPro Building Services\"         \"TrueNorth Facility Solutions\"    \n[59] \"SecurePrime Management\"           \"FreshWave Property Support\"      \n[61] \"SwiftReach Building Maintenance\"  \"EverReach Property Care\"         \n[63] \"SilverStone Management\"           \"EliteEdge Facilities Group\"      \n[65] \"GreenEdge Facility Masters\"       \"InfiniteCare Property Services\"  \n[67] \"GoldenTech Maintenance\"           \"EliteCare Facility Support\"      \n[69] \"StarCrest Facility Services\"      \"SwiftSail Building Solutions\"    \n[71] \"FreshTech Management\"             \"SecureTech Building Solutions\"   \n[73] \"TrustGuard Facilities\"            \"FreshStart Building Solutions\"   \n[75] \"InfinitePro Facility Care\"        \"UnitedPro Property Services\"     \n[77] \"SilverLine Facility Experts\"      \"CleanStone Property Experts\"     \n[79] \"CleanReach Facility Experts\"      \"VisionQuest Facility Care\"       \n[81] \"GreenCrest Facilities Group\"      \"HighPoint Property Care\"         \n[83] \"SecureReach Property Care\"        \"UrbanReach Facility Support\"     \n[85] \"GrandTech Building Solutions\"     \"EverGreen Property Support\"      \n[87] \"BlueReach Property Solutions\"     \"TrustMax Facilities Masters\"     \n[89] \"EliteReach Building Solutions\"    \"SwiftCrest Property Management\"  \n[91] \"HighTech Facilities Group\"        \"GoldenStar Property Care\"        \n[93] \"HorizonStone Facility Services\"   \"SkyQuest Facility Care\"          \n[95] \"StarTech Facility Solutions\"      \"GrandEdge Property Solutions\"    \n[97] \"SafeTech Maintenance\"             \"SwiftTech Facility Solutions\"    \n\n\nA total of 98 suppliers were paid for their services."
  },
  {
    "objectID": "AGO_Prelim.html#setting-the-correct-variable-types",
    "href": "AGO_Prelim.html#setting-the-correct-variable-types",
    "title": "AGO_Prelim",
    "section": "2.2 Setting the correct variable types",
    "text": "2.2 Setting the correct variable types\nThe code below shows the variable types for each column.\n\nglimpse(procurement_data)\n\nRows: 7,000\nColumns: 8\n$ `S/N`                       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\n$ `Procurement Code`          &lt;chr&gt; \"ITQ20160157\", \"ITQ20170001\", \"ITQ20170002…\n$ `Procurement Type`          &lt;chr&gt; \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", …\n$ Agency                      &lt;chr&gt; \"National Institute of Scientific Advancem…\n$ `Procurement Description`   &lt;chr&gt; \"Parking management and traffic control so…\n$ `Date of Award (2017-2022)` &lt;chr&gt; \"1/7/2016\", \"1/1/2017\", \"5/1/2017\", \"8/1/2…\n$ Supplier                    &lt;chr&gt; \"SafeHaven Maintenance\", \"TrueView Managem…\n$ `Awarded Amount`            &lt;chr&gt; \"$40,532.00\", \"$16,928.00\", \"$14,183.00\", …\n\n\nOver here, we see that Date of Award and Awarded Amount are in character type and should be changed to date and integer respectively.\n\nclean_data &lt;- procurement_data %&gt;%\n    mutate(`Date of Award (2017-2022)` = dmy(`Date of Award (2017-2022)`)) %&gt;%\n    mutate(`Awarded Amount` = as.numeric(gsub(\",\",\"\", gsub(\"\\\\$\",\"\", `Awarded Amount`)))) %&gt;%\n    rename(Date = `Date of Award (2017-2022)`)\n\nglimpse(clean_data)\n\nRows: 7,000\nColumns: 8\n$ `S/N`                     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…\n$ `Procurement Code`        &lt;chr&gt; \"ITQ20160157\", \"ITQ20170001\", \"ITQ20170002\",…\n$ `Procurement Type`        &lt;chr&gt; \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"I…\n$ Agency                    &lt;chr&gt; \"National Institute of Scientific Advancemen…\n$ `Procurement Description` &lt;chr&gt; \"Parking management and traffic control solu…\n$ Date                      &lt;date&gt; 2016-07-01, 2017-01-01, 2017-01-05, 2017-01…\n$ Supplier                  &lt;chr&gt; \"SafeHaven Maintenance\", \"TrueView Managemen…\n$ `Awarded Amount`          &lt;dbl&gt; 40532, 16928, 14183, 19908, 42332, 65341, 34…\n\n\nFor easier referencing, “Date of Award (2017-2022)” is changed to “Date”. As seen above, the respective columns have to changed accordingly."
  },
  {
    "objectID": "AGO_Prelim.html#data-cleaning",
    "href": "AGO_Prelim.html#data-cleaning",
    "title": "AGO_Prelim",
    "section": "2.3 Data Cleaning",
    "text": "2.3 Data Cleaning\nThe first task is to ensure that the data is accurate and reliable.\nProcurement procedures depend on the estimated value of the goods or services provided.\n\nSmall value purchases (SVP)\nFor goods or services with an estimated value of up to $10,000.\nInvitation to Quote (ITQ)\nFor goods or services with an estimated value of up to $100,000.\nInvitation to Tender (ITT)\nFor goods or services with an estimated value of above $100,000.\n\n\n2.3.1 Checking Awarded Amount\nGiven the limits, we should ensure that the Procurement Type is accurate to the value attached to the procurement.\nThe code below shows that there are procurement done at below the value of $10,000 but are not labelled as SVP.\n\nany(clean_data$`Awarded Amount` &lt; 10000 & clean_data$`Procurement Type` == \"SVP\")\n\n[1] FALSE\n\nany(clean_data$`Awarded Amount` &gt; 100000 & clean_data$`Procurement Type` == \"ITT\")\n\n[1] TRUE\n\n\n\nfor (i in 1:7000){\n  if (clean_data$`Awarded Amount`[i] &lt; 10000){\n    if (clean_data$`Procurement Type`[i] != \"SVP\"){\n      clean_data$`Procurement Type`[i] = \"SVP\"\n    }\n    if (clean_data$`Awarded Amount`[i] &gt; 100000){\n      if (clean_data$`Procurement Type`[i] != \"ITT\"){\n        clean_data$`Procurement Type`[i] ==\"ITT\"\n      } \n    else {\n      if (clean_data$`Procurement Type`[i] != \"ITQ\"){\n        clean_data$`Procurement Type`[i] ==\"ITQ\"\n      }\n    }    \n    }\n    \n  }\n}\n\n\nany(clean_data$`Awarded Amount` &lt; 10000 & clean_data$`Procurement Type` == \"SVP\")\n\n[1] TRUE\n\nany(clean_data$`Awarded Amount` &gt; 10000 & clean_data$`Awarded Amount` &lt; 100000 & clean_data$`Procurement Type` == \"ITQ\")\n\n[1] TRUE\n\nany(clean_data$`Awarded Amount` &gt; 100000 & clean_data$`Procurement Type` == \"ITT\")\n\n[1] TRUE\n\n\n\n\n2.3.2 Procurement Code and Type\nThrough observation, we notice that the procurement code has the first three letters that indicate the procurement type. Ensure that they are correctly identified and can be flagged accordingly to the agency handling such datasets.\n\nmismatched_indices &lt;- which(str_sub(clean_data$`Procurement Code`, 1, 3) != clean_data$`Procurement Type`)\nmismatched_indices\n\n [1]  117  262  396  629  644  807 1099 1195 1316 1392\n\n\nAs we can see, there were 10 mismatched indices.\n\nclean_data[mismatched_indices, c(1,2,3,8)]\n\n# A tibble: 10 × 4\n   `S/N` `Procurement Code` `Procurement Type` `Awarded Amount`\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                         &lt;dbl&gt;\n 1   117 ITQ20170116        SVP                            9509\n 2   262 ITQ20170261        SVP                            9072\n 3   396 ITQ20180087        SVP                            9888\n 4   629 ITQ20190014        SVP                            9998\n 5   644 ITQ20190029        SVP                            9438\n 6   807 ITQ20190192        SVP                            9854\n 7  1099 ITQ20200144        SVP                            9161\n 8  1195 ITQ20210029        SVP                            9537\n 9  1316 ITQ20210150        SVP                            9407\n10  1392 ITQ20220013        SVP                            8069\n\n\nFrom the table above, all 10 were mislabeled as ITQ. We can flag this to the team handling this dataset to keep watch. This could be easily fixed through automated processes by automatically assigning the correct type and code based on amount declared or invoiced in.\nNext, amend the dataframe accordingly to reflect the intended change.\n\nfinal_data &lt;- clean_data %&gt;%\n  mutate(`Procurement Code` = ifelse(\n    str_sub(`Procurement Code`, 1, 3) != `Procurement Type`,\n    paste0(`Procurement Type`, str_sub(`Procurement Code`, 4)),\n    `Procurement Code`\n  ))\nfinal_data[mismatched_indices,]\n\n# A tibble: 10 × 8\n   `S/N` `Procurement Code` Procurem…¹ Agency Procu…² Date       Suppl…³ Award…⁴\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1   117 SVP20170116        SVP        Burea… Indoor… 2017-05-08 SafeHa…    9509\n 2   262 SVP20170261        SVP        Depar… Pest c… 2017-11-01 StarSt…    9072\n 3   396 SVP20180087        SVP        Burea… Parkin… 2018-04-06 Golden…    9888\n 4   629 SVP20190014        SVP        Depar… Energy… 2019-01-14 UrbanT…    9998\n 5   644 SVP20190029        SVP        Burea… Renova… 2019-02-05 EverGr…    9438\n 6   807 SVP20190192        SVP        Burea… Space … 2019-07-21 SafeRe…    9854\n 7  1099 SVP20200144        SVP        Depar… Furnit… 2020-08-31 BlueSk…    9161\n 8  1195 SVP20210029        SVP        Burea… Tenant… 2021-02-10 BlueRe…    9537\n 9  1316 SVP20210150        SVP        Depar… HVAC s… 2021-08-29 Infini…    9407\n10  1392 SVP20220013        SVP        Depar… Emerge… 2022-02-07 Secure…    8069\n# … with abbreviated variable names ¹​`Procurement Type`,\n#   ²​`Procurement Description`, ³​Supplier, ⁴​`Awarded Amount`\n\n\n\n\n2.3.3 Out of range data elements\nThe code below shows that there are at least two datasets outside the range of the suppose time period.\n\nwhich(any(final_data$Date &lt; ymd(\"2017-01-01\")),arr.ind = TRUE\n)\n\n[1] 1\n\nwhich(any(final_data$Date &gt; ymd(\"2022-12-31\")), arr.ind = TRUE)\n\n[1] 1\n\n\n\ndate_min &lt;- min(final_data$Date)\ndate_max &lt;- max(final_data$Date)\nwhich(final_data$Date == date_min)\n\n[1] 1\n\nwhich(final_data$Date == date_max)\n\n[1] 7000\n\nfinal_data[c(1,7000),]\n\n# A tibble: 2 × 8\n  `S/N` `Procurement Code` Procureme…¹ Agency Procu…² Date       Suppl…³ Award…⁴\n  &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1     1 ITQ20160157        ITQ         Natio… Parkin… 2016-07-01 SafeHa…   40532\n2  7000 ITT20240605        ITT         Commi… Energy… 2024-08-29 TrueWa…  316264\n# … with abbreviated variable names ¹​`Procurement Type`,\n#   ²​`Procurement Description`, ³​Supplier, ⁴​`Awarded Amount`\n\n\nWe can remove the two entries from the dataset.\n\nfinal &lt;- final_data[-c(1,7000),]\n\n\nmax(final$Date)\n\n[1] \"2023-08-15\"\n\nmin(final$Date)\n\n[1] \"2017-01-01\"\n\nwhich(final$Date == max(final$Date))\n\n[1] 6998\n\nfinal &lt;- final[-6998,]\nmax(final$Date)\n\n[1] \"2022-12-29\"\n\n\n\nreadr::write_csv(final, \"AGO_Cleaned_Data.csv\")\n\nThen we can just call this cleaned data from our folder.\n\n\nclean_data &lt;- read_csv(\"AGO_Cleaned_Data.csv\")"
  },
  {
    "objectID": "AGO_Prelim.html#visualisation",
    "href": "AGO_Prelim.html#visualisation",
    "title": "AGO_Prelim",
    "section": "2.4 Visualisation",
    "text": "2.4 Visualisation\nHere, we are visualising the Agency and the total sum spent per month just to have a sensing of the different agencies and size of expenditure.\n\nagency_grouped &lt;- clean_data %&gt;%\n  group_by(`Procurement Type`, Agency, Month = floor_date(Date,\"month\")) %&gt;%\n  summarize(Total_Amount = sum(`Awarded Amount`), .groups = 'drop')\n\n\nlibrary(DT)\n\ndatatable(agency_grouped)\n\n\n\n\n\n\n\n2.4.1 Plot\n\nlibrary(plotly)\nlibrary(dplyr)\n\n# Initialize an empty plot\nplot_data &lt;- plot_ly()\n\n# Unique procurement types\nprocurement_types &lt;- unique(agency_grouped$`Procurement Type`)\n\nagencies &lt;- unique(clean_data$Agency)\n\n# Iteratively add traces for each combination of agency and procurement type\nfor (agency in agencies) {\n    for (ptype in procurement_types) {\n        plot_data &lt;- add_trace(plot_data, \n                               data = filter(agency_grouped, Agency == agency, `Procurement Type` == ptype),\n                               x = ~Month, \n                               y = ~Total_Amount, \n                               color = ~Agency,\n                               line = list(shape = \"spline\"),\n                               type = \"scatter\", mode = \"lines+markers\",\n                               text = ~paste(\"Total Amount:\", Total_Amount),\n                               hoverinfo = \"text+x\",\n                               name = paste(agency, ptype),\n                               visible = agency == agencies[1] && ptype == procurement_types[1]  # Default visibility\n        )\n    }\n}\n\n# Set up the dropdown menu \ndropdown &lt;- list()\ncounter &lt;- 1\nfor (agency in agencies) {\n    for (ptype in procurement_types) {\n        visibility_vals &lt;- rep(FALSE, length(agencies) * length(procurement_types))\n        visibility_vals[counter] &lt;- TRUE\n        dropdown[[counter]] &lt;- list(\n            args = list(\"visible\", visibility_vals),\n            label = paste(\"Agency:\", agency, \"| Procurement Type:\", ptype),\n            method = \"restyle\"\n        )\n        counter &lt;- counter + 1\n    }\n}\n\n# Add dropdown to the layout and remove the legend\nplot_data &lt;- layout(plot_data, \n                    title = \"Sum of Amount Awarded Over Time by Agency and Procurement Type\",\n                    xaxis = list(rangeslider = list(visible = TRUE)),\n                    yaxis = list(title = \"Total Amount\"),\n                    showlegend = FALSE,  # Hides the legend\n                    updatemenus = list(\n                        list(\n                            y = 0.95,  # Adjust the position of dropdown\n                            x = 1,\n                            yanchor = \"top\",\n                            xanchor = \"left\",\n                            buttons = dropdown\n                        )\n                    ),\n                    margin = list(l = 250, r = 50, b = 40, t = 40, pad = 4)\n                    )\nplot_data\n\n\n\n\n\n\nlibrary(dplyr)\n\n# Generate the summary table\nsummary_table &lt;- clean_data %&gt;%\n  group_by(`Procurement Description`) %&gt;%\n  summarise(num_suppliers = n_distinct(Supplier))\n\nprint(summary_table)\n\n# A tibble: 20 × 2\n   `Procurement Description`                                      num_suppliers\n   &lt;chr&gt;                                                                  &lt;int&gt;\n 1 24/7 security and access control management.                              90\n 2 Building automation and smart technology integration.                     90\n 3 Building maintenance and repairs.                                         91\n 4 Cleaning supplies and consumables procurement and management.             27\n 5 Comprehensive janitorial services and cleanliness maintenance.            84\n 6 Emergency response and disaster recovery planning.                        90\n 7 Energy-efficient lighting installation and maintenance.                   97\n 8 Energy-efficient systems and consumption monitoring.                      91\n 9 Expert landscaping and groundskeeping solutions.                          93\n10 Fire safety system installation and maintenance.                          93\n11 Furniture and equipment maintenance and inventory tracking.               91\n12 HVAC system maintenance and climate control optimization.                 91\n13 Health and safety compliance management and training.                     89\n14 Indoor air quality monitoring and improvement measures.                   94\n15 Parking management and traffic control solutions.                         92\n16 Pest control services for a pest-free environment.                        98\n17 Renovation and remodeling project management.                             91\n18 Space planning and utilization optimization strategies.                   91\n19 Tenant communication and customer service assistance.                     92\n20 Waste management and recycling program implementation.                    91"
  },
  {
    "objectID": "AGO_Prelim.html#visualisation-of-aggregate-expenditure-by-task",
    "href": "AGO_Prelim.html#visualisation-of-aggregate-expenditure-by-task",
    "title": "AGO_Prelim",
    "section": "5.1 Visualisation of aggregate expenditure by task",
    "text": "5.1 Visualisation of aggregate expenditure by task\nIn all 5 agencies, I will be looking specifically on their spending on each unique procurement description.\n\nNational Commission for Space ExplorationNational Cybersecurity Task ForceNational Institute of Scientific AdvancementOffice of International Relations and Diplomatic AffairsOffice of Public Safety and Emergency Management\n\n\n\n# Split the data into a list of dataframes based on the 'description' column\nlist_of_dfs &lt;- split(NCSE, NCSE$`Procurement Description`)\n\n# Aggregate awarded amount by year for each dataframe in the list\naggregated_data &lt;- lapply(list_of_dfs, function(df) {\n  aggregate(`Awarded Amount` ~ Year, data = df, sum)\n})\n\n# If you want each aggregated dataframe in the list as a separate dataframe:\nlist2env(aggregated_data, envir = .GlobalEnv)\n\n&lt;environment: R_GlobalEnv&gt;\n\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nplots &lt;- list() \nfor (i in 1:20){\ndata &lt;- as.data.frame(aggregated_data[[i]])\nwrapped_title &lt;- label_wrap_gen(width = 20)(names(aggregated_data)[i])\nplot_graph &lt;- ggplot(data, aes(x = Year, y = `Awarded Amount`)) +\n    geom_line(aes(color = \"blue\")) +\n    geom_point(color = \"blue\") +\n    labs(title = wrapped_title) +\n      theme_minimal()\n    \nplots[[i]] &lt;- plot_graph\n}\n\n\ngrid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[5]], plots[[6]], plots[[7]], plots[[8]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[13]], plots[[14]], plots[[15]], plots[[16]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[17]], plots[[18]], plots[[19]], plots[[20]], ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n# Split the data into a list of dataframes based on the 'description' column\nlist_of_dfs &lt;- split(NCTF, NCTF$`Procurement Description`)\n\n# Aggregate awarded amount by year for each dataframe in the list\naggregated_data &lt;- lapply(list_of_dfs, function(df) {\n  aggregate(`Awarded Amount` ~ Year, data = df, sum)\n})\n\n# If you want each aggregated dataframe in the list as a separate dataframe:\nlist2env(aggregated_data, envir = .GlobalEnv)\n\n&lt;environment: R_GlobalEnv&gt;\n\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nplots &lt;- list() \nfor (i in 1:20){\ndata &lt;- as.data.frame(aggregated_data[[i]])\nwrapped_title &lt;- label_wrap_gen(width = 20)(names(aggregated_data)[i])\nplot_graph &lt;- ggplot(data, aes(x = Year, y = `Awarded Amount`)) +\n    geom_line(aes(color = \"blue\")) +\n    geom_point(color = \"blue\") +\n    labs(title = wrapped_title) +\n      theme_minimal()\n    \nplots[[i]] &lt;- plot_graph\n}\n\n\ngrid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[5]], plots[[6]], plots[[7]], plots[[8]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[13]], plots[[14]], plots[[15]], plots[[16]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[17]], plots[[18]], plots[[19]], plots[[20]], ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n# Split the data into a list of dataframes based on the 'description' column\nlist_of_dfs &lt;- split(NISA, NISA$`Procurement Description`)\n\n# Aggregate awarded amount by year for each dataframe in the list\naggregated_data &lt;- lapply(list_of_dfs, function(df) {\n  aggregate(`Awarded Amount` ~ Year, data = df, sum)\n})\n\n# If you want each aggregated dataframe in the list as a separate dataframe:\nlist2env(aggregated_data, envir = .GlobalEnv)\n\n&lt;environment: R_GlobalEnv&gt;\n\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nplots &lt;- list() \nfor (i in 1:20){\ndata &lt;- as.data.frame(aggregated_data[[i]])\nwrapped_title &lt;- label_wrap_gen(width = 20)(names(aggregated_data)[i])\nplot_graph &lt;- ggplot(data, aes(x = Year, y = `Awarded Amount`)) +\n    geom_line(aes(color = \"blue\")) +\n    geom_point(color = \"blue\") +\n    labs(title = wrapped_title) +\n      theme_minimal()\n    \nplots[[i]] &lt;- plot_graph\n}\n\n\ngrid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[5]], plots[[6]], plots[[7]], plots[[8]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[13]], plots[[14]], plots[[15]], plots[[16]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[17]], plots[[18]], plots[[19]], plots[[20]], ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n# Split the data into a list of dataframes based on the 'description' column\nlist_of_dfs &lt;- split(OIRDA, OIRDA$`Procurement Description`)\n\n# Aggregate awarded amount by year for each dataframe in the list\naggregated_data &lt;- lapply(list_of_dfs, function(df) {\n  aggregate(`Awarded Amount` ~ Year, data = df, sum)\n})\n\n# If you want each aggregated dataframe in the list as a separate dataframe:\nlist2env(aggregated_data, envir = .GlobalEnv)\n\n&lt;environment: R_GlobalEnv&gt;\n\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nplots &lt;- list() \nfor (i in 1:20){\ndata &lt;- as.data.frame(aggregated_data[[i]])\nwrapped_title &lt;- label_wrap_gen(width = 20)(names(aggregated_data)[i])\nplot_graph &lt;- ggplot(data, aes(x = Year, y = `Awarded Amount`)) +\n    geom_line(aes(color = \"blue\")) +\n    geom_point(color = \"blue\") +\n    labs(title = wrapped_title) +\n      theme_minimal()\n    \nplots[[i]] &lt;- plot_graph\n}\n\n\ngrid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[5]], plots[[6]], plots[[7]], plots[[8]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[13]], plots[[14]], plots[[15]], plots[[16]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[17]], plots[[18]], plots[[19]], plots[[20]], ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n# Split the data into a list of dataframes based on the 'description' column\nlist_of_dfs &lt;- split(OPSEM, OPSEM$`Procurement Description`)\n\n# Aggregate awarded amount by year for each dataframe in the list\naggregated_data &lt;- lapply(list_of_dfs, function(df) {\n  aggregate(`Awarded Amount` ~ Year, data = df, sum)\n})\n\n# If you want each aggregated dataframe in the list as a separate dataframe:\nlist2env(aggregated_data, envir = .GlobalEnv)\n\n&lt;environment: R_GlobalEnv&gt;\n\n\n\nlibrary(ggplot2)\nlibrary(gridExtra)\n\nplots &lt;- list() \nfor (i in 1:20){\ndata &lt;- as.data.frame(aggregated_data[[i]])\nwrapped_title &lt;- label_wrap_gen(width = 20)(names(aggregated_data)[i])\nplot_graph &lt;- ggplot(data, aes(x = Year, y = `Awarded Amount`)) +\n    geom_line(aes(color = \"blue\")) +\n    geom_point(color = \"blue\") +\n    labs(title = wrapped_title) +\n      theme_minimal()\n    \nplots[[i]] &lt;- plot_graph\n}\n\n\ngrid.arrange(plots[[1]], plots[[2]], plots[[3]], plots[[4]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[5]], plots[[6]], plots[[7]], plots[[8]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[9]], plots[[10]], plots[[11]], plots[[12]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[13]], plots[[14]], plots[[15]], plots[[16]], ncol = 2, nrow = 2)\n\n\n\n\n\ngrid.arrange(plots[[17]], plots[[18]], plots[[19]], plots[[20]], ncol = 2, nrow = 2)\n\n\n\n\n\n\n\n\nbreaks &lt;- c(0 ,10000, 20000, 30000, 40000, 50000, 60000, 70000, 80000, 90000, 100000)\n# Define levels\nlabels &lt;- c(\"Level 0\",\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5\", \"Level 6\", \"Level 7\", \"Level 8\", \"Level 9\")\n# Assign levels based on Amount\nNCSE_ITQ &lt;- NCSE %&gt;% \n  filter(`Procurement Type` == \"ITQ\")\n\nNCSE_ITQ$Level &lt;- cut(NCSE_ITQ$`Awarded Amount`, breaks = breaks, labels = labels, include.lowest = TRUE)\n\n\nggplot(NCSE_ITQ, aes(x=Level)) +\n  geom_bar(position=\"dodge\") +\n  labs(title=\"Number of Claims per Level\", x=\"Level\", y=\"Count\") +\n  theme_minimal() +\n  theme(legend.position=\"none\")\n\n\n\n\n\nbreaks &lt;- c(100000, 200000, 300000, 400000, 500000, 600000, 700000, 800000, 900000, 1000000, 10000000)\nlabels &lt;- c(\"Level 1\", \"Level 2\", \"Level 3\", \"Level 4\", \"Level 5\", \"Level 6\", \"Level 7\", \"Level 8\", \"Level 9\", \"Level 10\")\n# Assign levels based on Amount\nNCSE_ITT &lt;- NCSE %&gt;% \n  filter(`Procurement Type` == \"ITT\")\n\nNCSE_ITT$Level &lt;- cut(NCSE_ITT$`Awarded Amount`, breaks = breaks, labels = labels, include.lowest = TRUE)\n\n\nggplot(NCSE_ITT, aes(x=Level)) +\n  geom_bar(position=\"dodge\") +\n  labs(title=\"Number of Claims per Level\", x=\"Level\", y=\"Count\") +\n  theme_minimal() +\n  theme(legend.position=\"none\")"
  },
  {
    "objectID": "Data_Challenge.html",
    "href": "Data_Challenge.html",
    "title": "AGO_Data_Challenge",
    "section": "",
    "text": "The purpose of this document is to note down our thought processes and how the team has analysed the case on each step. For readers, you can think of this document as a documentation of our work on the R platform. For the in depth analysis, please refer to our written report. # Setting Up\nlibrary(dplyr)\nlibrary(tidyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(lubridate)\nlibrary(stringr)\nlibrary(crosstalk)\nlibrary(plotly)\nlibrary(DT)\nlibrary(ggthemes)"
  },
  {
    "objectID": "Data_Challenge.html#loading-of-dataset",
    "href": "Data_Challenge.html#loading-of-dataset",
    "title": "AGO_Data_Challenge",
    "section": "0.1 Loading of Dataset",
    "text": "0.1 Loading of Dataset\n\nprocurement_data &lt;- read_csv(\"Data_file.csv\")"
  },
  {
    "objectID": "Data_Challenge.html#understanding-the-dataset",
    "href": "Data_Challenge.html#understanding-the-dataset",
    "title": "AGO_Data_Challenge",
    "section": "1.1 Understanding the Dataset",
    "text": "1.1 Understanding the Dataset\n\nChecking for Duplicate entries\n\n\nany(duplicated(procurement_data$`Procurement Code`))\n\n[1] FALSE\n\n\nProcurement Code does not have duplicated entries and has an assigned unique identifier to the procurement made.\n\nAgencyProcurement DescriptionSupplier\n\n\nThis showcases the number of Government agencies and Statutory Boards within this dataset.\n\nunique(procurement_data$Agency)\n\n [1] \"National Institute of Scientific Advancement\"            \n [2] \"Office of International Relations and Diplomatic Affairs\"\n [3] \"Ministry of Strategic Economic Planning\"                 \n [4] \"Agency for Cultural Preservation and Heritage\"           \n [5] \"Department of Public Health and Disease Control\"         \n [6] \"Institute for Social Justice and Equality\"               \n [7] \"Department of Advanced Technological Research\"           \n [8] \"Office of Public Safety and Emergency Management\"        \n [9] \"National Commission for Space Exploration\"               \n[10] \"National Cybersecurity Task Force\"                       \n[11] \"Bureau of Urban Development and Infrastructure\"          \n[12] \"Department of Energy Conservation and Sustainability\"    \n[13] \"Bureau of National Security and Intelligence\"            \n[14] \"Commission for Ethical Governance\"                       \n[15] \"Federal Agency for Environmental Protection\"             \n\n\nThere are a total of 15 agencies under this dataset.\n\n\nThis showcases how procurement purposes are being categorized.\n\nunique(procurement_data$`Procurement Description`)\n\n [1] \"Parking management and traffic control solutions.\"             \n [2] \"Space planning and utilization optimization strategies.\"       \n [3] \"Health and safety compliance management and training.\"         \n [4] \"Waste management and recycling program implementation.\"        \n [5] \"Emergency response and disaster recovery planning.\"            \n [6] \"Pest control services for a pest-free environment.\"            \n [7] \"Energy-efficient lighting installation and maintenance.\"       \n [8] \"Indoor air quality monitoring and improvement measures.\"       \n [9] \"Building maintenance and repairs.\"                             \n[10] \"Building automation and smart technology integration.\"         \n[11] \"Cleaning supplies and consumables procurement and management.\" \n[12] \"Furniture and equipment maintenance and inventory tracking.\"   \n[13] \"Fire safety system installation and maintenance.\"              \n[14] \"HVAC system maintenance and climate control optimization.\"     \n[15] \"Tenant communication and customer service assistance.\"         \n[16] \"Comprehensive janitorial services and cleanliness maintenance.\"\n[17] \"Expert landscaping and groundskeeping solutions.\"              \n[18] \"24/7 security and access control management.\"                  \n[19] \"Renovation and remodeling project management.\"                 \n[20] \"Energy-efficient systems and consumption monitoring.\"          \n\n\nThere are a total of 20 categories of reasons for why procurement was made.\n\n\nThis showcases the catalogue of suppliers agencies may refer to for procurement\n\nunique(procurement_data$Supplier)\n\n [1] \"SafeHaven Maintenance\"            \"TrueView Management\"             \n [3] \"CleanHarbor Facility Care\"        \"EverPrime Property Management\"   \n [5] \"UrbanTech Management\"             \"GrandReach Facility Care\"        \n [7] \"GoldenHarbor Management\"          \"TrueWave Facilities Management\"  \n [9] \"CleanSweep Property Management\"   \"SkyHigh Property Management\"     \n[11] \"GrandView Facilities Group\"       \"EliteTech Property Support\"      \n[13] \"SwiftGuard Management\"            \"HorizonPro Facility Management\"  \n[15] \"InfiniteSpace Building Solutions\" \"AlphaCrest Property Support\"     \n[17] \"Xtreme Maintenance\"               \"StarStone Facility Services\"     \n[19] \"UrbanGuard Facilities\"            \"InfiniteGuard Building Care\"     \n[21] \"UrbanEagle Maintenance\"           \"SilverTech Facilities Masters\"   \n[23] \"ApexGuard Facility Services\"      \"EverPro Property Support\"        \n[25] \"TruePro Building Experts\"         \"SafeReach Property Solutions\"    \n[27] \"BlueBreeze Facility Solutions\"    \"GoldenGate Facility Masters\"     \n[29] \"Reliable Facility Services\"       \"GreenPrime Facilities Group\"     \n[31] \"SkyHarbor Facility Experts\"       \"BlueCrest Facility Support\"      \n[33] \"AlphaPro Facility Solutions\"      \"HighWave Building Solutions\"     \n[35] \"TrustEdge Building Maintenance\"   \"BlueSky Property Care\"           \n[37] \"SkyStone Property Solutions\"      \"GreenLine Building Experts\"      \n[39] \"UrbanEdge Maintenance\"            \"HorizonHarbor Property Services\" \n[41] \"SafeEdge Property Care\"           \"AlphaWave Property Solutions\"    \n[43] \"InfiniteTech Building Solutions\"  \"GrandPro Facilities Support\"     \n[45] \"GoldenReach Property Management\"  \"SafeHarbor Facilities Group\"     \n[47] \"SecureSpace Management\"           \"FreshEdge Facility Support\"      \n[49] \"BlueSail Property Experts\"        \"HorizonView Property Management\" \n[51] \"TrustPro Building Maintenance\"    \"StarHarbor Facilities Group\"     \n[53] \"SilverReach Facility Services\"    \"GreenWave Facilities Management\" \n[55] \"AlphaStone Property Support\"      \"AlphaTech Facilities Management\" \n[57] \"MaxPro Building Services\"         \"TrueNorth Facility Solutions\"    \n[59] \"SecurePrime Management\"           \"FreshWave Property Support\"      \n[61] \"SwiftReach Building Maintenance\"  \"EverReach Property Care\"         \n[63] \"SilverStone Management\"           \"EliteEdge Facilities Group\"      \n[65] \"GreenEdge Facility Masters\"       \"InfiniteCare Property Services\"  \n[67] \"GoldenTech Maintenance\"           \"EliteCare Facility Support\"      \n[69] \"StarCrest Facility Services\"      \"SwiftSail Building Solutions\"    \n[71] \"FreshTech Management\"             \"SecureTech Building Solutions\"   \n[73] \"TrustGuard Facilities\"            \"FreshStart Building Solutions\"   \n[75] \"InfinitePro Facility Care\"        \"UnitedPro Property Services\"     \n[77] \"SilverLine Facility Experts\"      \"CleanStone Property Experts\"     \n[79] \"CleanReach Facility Experts\"      \"VisionQuest Facility Care\"       \n[81] \"GreenCrest Facilities Group\"      \"HighPoint Property Care\"         \n[83] \"SecureReach Property Care\"        \"UrbanReach Facility Support\"     \n[85] \"GrandTech Building Solutions\"     \"EverGreen Property Support\"      \n[87] \"BlueReach Property Solutions\"     \"TrustMax Facilities Masters\"     \n[89] \"EliteReach Building Solutions\"    \"SwiftCrest Property Management\"  \n[91] \"HighTech Facilities Group\"        \"GoldenStar Property Care\"        \n[93] \"HorizonStone Facility Services\"   \"SkyQuest Facility Care\"          \n[95] \"StarTech Facility Solutions\"      \"GrandEdge Property Solutions\"    \n[97] \"SafeTech Maintenance\"             \"SwiftTech Facility Solutions\"    \n\n\nA total of 98 suppliers were paid for their services."
  },
  {
    "objectID": "Data_Challenge.html#setting-the-correct-variable-types",
    "href": "Data_Challenge.html#setting-the-correct-variable-types",
    "title": "AGO_Data_Challenge",
    "section": "1.2 Setting the correct variable types",
    "text": "1.2 Setting the correct variable types\nThe code below shows the variable types for each column.\n\nglimpse(procurement_data)\n\nRows: 7,000\nColumns: 8\n$ `S/N`                       &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13,…\n$ `Procurement Code`          &lt;chr&gt; \"ITQ20160157\", \"ITQ20170001\", \"ITQ20170002…\n$ `Procurement Type`          &lt;chr&gt; \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", …\n$ Agency                      &lt;chr&gt; \"National Institute of Scientific Advancem…\n$ `Procurement Description`   &lt;chr&gt; \"Parking management and traffic control so…\n$ `Date of Award (2017-2022)` &lt;chr&gt; \"1/7/2016\", \"1/1/2017\", \"5/1/2017\", \"8/1/2…\n$ Supplier                    &lt;chr&gt; \"SafeHaven Maintenance\", \"TrueView Managem…\n$ `Awarded Amount`            &lt;chr&gt; \"$40,532.00\", \"$16,928.00\", \"$14,183.00\", …\n\n\nOver here, we see that Date of Award and Awarded Amount are in character type and should be changed to date and integer respectively.\n\nclean_data &lt;- procurement_data %&gt;%\n    mutate(`Date of Award (2017-2022)` = dmy(`Date of Award (2017-2022)`)) %&gt;%\n    mutate(`Awarded Amount` = as.numeric(gsub(\",\",\"\", gsub(\"\\\\$\",\"\", `Awarded Amount`)))) %&gt;%\n    rename(Date = `Date of Award (2017-2022)`)\n\nglimpse(clean_data)\n\nRows: 7,000\nColumns: 8\n$ `S/N`                     &lt;dbl&gt; 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 1…\n$ `Procurement Code`        &lt;chr&gt; \"ITQ20160157\", \"ITQ20170001\", \"ITQ20170002\",…\n$ `Procurement Type`        &lt;chr&gt; \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"ITQ\", \"I…\n$ Agency                    &lt;chr&gt; \"National Institute of Scientific Advancemen…\n$ `Procurement Description` &lt;chr&gt; \"Parking management and traffic control solu…\n$ Date                      &lt;date&gt; 2016-07-01, 2017-01-01, 2017-01-05, 2017-01…\n$ Supplier                  &lt;chr&gt; \"SafeHaven Maintenance\", \"TrueView Managemen…\n$ `Awarded Amount`          &lt;dbl&gt; 40532, 16928, 14183, 19908, 42332, 65341, 34…\n\n\nFor easier referencing, “Date of Award (2017-2022)” is changed to “Date”. As seen above, the respective columns have to changed accordingly."
  },
  {
    "objectID": "Data_Challenge.html#data-cleaning",
    "href": "Data_Challenge.html#data-cleaning",
    "title": "AGO_Data_Challenge",
    "section": "1.3 Data Cleaning",
    "text": "1.3 Data Cleaning\nThe first task is to ensure that the data is accurate and reliable.\nProcurement procedures depend on the estimated value of the goods or services provided.\n\nSmall value purchases (SVP)\nFor goods or services with an estimated value of up to $10,000.\nInvitation to Quote (ITQ)\nFor goods or services with an estimated value of up to $100,000.\nInvitation to Tender (ITT)\nFor goods or services with an estimated value of above $100,000.\n\n\n1.3.1 Checking Awarded Amount\nGiven the limits, we should ensure that the Procurement Type is accurate to the value attached to the procurement.\nThe code below shows that there are procurement done at below the value of $10,000 but are not labelled as SVP.\n\nany(clean_data$`Awarded Amount` &lt; 10000 & clean_data$`Procurement Type` == \"SVP\")\n\n[1] FALSE\n\nany(clean_data$`Awarded Amount` &gt; 100000 & clean_data$`Procurement Type` == \"ITT\")\n\n[1] TRUE\n\n\n\nfor (i in 1:7000){\n  if (clean_data$`Awarded Amount`[i] &lt; 10000){\n    if (clean_data$`Procurement Type`[i] != \"SVP\"){\n      clean_data$`Procurement Type`[i] = \"SVP\"\n    }\n    if (clean_data$`Awarded Amount`[i] &gt; 100000){\n      if (clean_data$`Procurement Type`[i] != \"ITT\"){\n        clean_data$`Procurement Type`[i] ==\"ITT\"\n      } \n    else {\n      if (clean_data$`Procurement Type`[i] != \"ITQ\"){\n        clean_data$`Procurement Type`[i] ==\"ITQ\"\n      }\n    }    \n    }\n    \n  }\n}\n\n\nany(clean_data$`Awarded Amount` &lt; 10000 & clean_data$`Procurement Type` == \"SVP\")\n\n[1] TRUE\n\nany(clean_data$`Awarded Amount` &gt; 10000 & clean_data$`Awarded Amount` &lt; 100000 & clean_data$`Procurement Type` == \"ITQ\")\n\n[1] TRUE\n\nany(clean_data$`Awarded Amount` &gt; 100000 & clean_data$`Procurement Type` == \"ITT\")\n\n[1] TRUE\n\n\nCategorisation have been completed.\n\n\n1.3.2 Procurement Code and Type\nThrough observation, we notice that the procurement code has the first three letters that indicate the procurement type. We have to ensure that they are correctly identified and can be flagged accordingly to the agency handling such datasets.\n\nmismatched_indices &lt;- which(str_sub(clean_data$`Procurement Code`, 1, 3) != clean_data$`Procurement Type`)\nmismatched_indices\n\n [1]  117  262  396  629  644  807 1099 1195 1316 1392\n\n\nAs we can see, there were 10 mismatched indices.\n\nclean_data[mismatched_indices, c(1,2,3,8)]\n\n# A tibble: 10 × 4\n   `S/N` `Procurement Code` `Procurement Type` `Awarded Amount`\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;                         &lt;dbl&gt;\n 1   117 ITQ20170116        SVP                            9509\n 2   262 ITQ20170261        SVP                            9072\n 3   396 ITQ20180087        SVP                            9888\n 4   629 ITQ20190014        SVP                            9998\n 5   644 ITQ20190029        SVP                            9438\n 6   807 ITQ20190192        SVP                            9854\n 7  1099 ITQ20200144        SVP                            9161\n 8  1195 ITQ20210029        SVP                            9537\n 9  1316 ITQ20210150        SVP                            9407\n10  1392 ITQ20220013        SVP                            8069\n\n\nFrom the table above, all 10 were mislabeled as ITQ. We can flag this to the team handling this dataset to keep watch. This could be easily fixed through automated processes by automatically assigning the correct type and code based on amount declared or invoiced in.\nNext, amend the dataframe accordingly to reflect the intended change.\n\nfinal_data &lt;- clean_data %&gt;%\n  mutate(`Procurement Code` = ifelse(\n    str_sub(`Procurement Code`, 1, 3) != `Procurement Type`,\n    paste0(`Procurement Type`, str_sub(`Procurement Code`, 4)),\n    `Procurement Code`\n  ))\nfinal_data[mismatched_indices,]\n\n# A tibble: 10 × 8\n   `S/N` `Procurement Code` Procurem…¹ Agency Procu…² Date       Suppl…³ Award…⁴\n   &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;      &lt;chr&gt;  &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;\n 1   117 SVP20170116        SVP        Burea… Indoor… 2017-05-08 SafeHa…    9509\n 2   262 SVP20170261        SVP        Depar… Pest c… 2017-11-01 StarSt…    9072\n 3   396 SVP20180087        SVP        Burea… Parkin… 2018-04-06 Golden…    9888\n 4   629 SVP20190014        SVP        Depar… Energy… 2019-01-14 UrbanT…    9998\n 5   644 SVP20190029        SVP        Burea… Renova… 2019-02-05 EverGr…    9438\n 6   807 SVP20190192        SVP        Burea… Space … 2019-07-21 SafeRe…    9854\n 7  1099 SVP20200144        SVP        Depar… Furnit… 2020-08-31 BlueSk…    9161\n 8  1195 SVP20210029        SVP        Burea… Tenant… 2021-02-10 BlueRe…    9537\n 9  1316 SVP20210150        SVP        Depar… HVAC s… 2021-08-29 Infini…    9407\n10  1392 SVP20220013        SVP        Depar… Emerge… 2022-02-07 Secure…    8069\n# … with abbreviated variable names ¹​`Procurement Type`,\n#   ²​`Procurement Description`, ³​Supplier, ⁴​`Awarded Amount`\n\n\n\n\n1.3.3 Out of range data elements\nThe code below shows that there are at least two datasets outside the range of the suppose time period.\n\nwhich(any(final_data$Date &lt; ymd(\"2017-01-01\")),arr.ind = TRUE\n)\n\n[1] 1\n\nwhich(any(final_data$Date &gt; ymd(\"2022-12-31\")), arr.ind = TRUE)\n\n[1] 1\n\n\n\ndate_min &lt;- min(final_data$Date)\ndate_max &lt;- max(final_data$Date)\nwhich(final_data$Date == date_min)\n\n[1] 1\n\nwhich(final_data$Date == date_max)\n\n[1] 7000\n\nfinal_data[c(1,7000),]\n\n# A tibble: 2 × 8\n  `S/N` `Procurement Code` Procureme…¹ Agency Procu…² Date       Suppl…³ Award…⁴\n  &lt;dbl&gt; &lt;chr&gt;              &lt;chr&gt;       &lt;chr&gt;  &lt;chr&gt;   &lt;date&gt;     &lt;chr&gt;     &lt;dbl&gt;\n1     1 ITQ20160157        ITQ         Natio… Parkin… 2016-07-01 SafeHa…   40532\n2  7000 ITT20240605        ITT         Commi… Energy… 2024-08-29 TrueWa…  316264\n# … with abbreviated variable names ¹​`Procurement Type`,\n#   ²​`Procurement Description`, ³​Supplier, ⁴​`Awarded Amount`\n\n\nWe can remove the two entries from the dataset.\n\nfinal &lt;- final_data[-c(1,7000),]\n\nWe did one more check using the max and min functions and found one more entry. We then remove the entry from the dataset.\n\nmax(final$Date)\n\n[1] \"2023-08-15\"\n\nmin(final$Date)\n\n[1] \"2017-01-01\"\n\nwhich(final$Date == max(final$Date))\n\n[1] 6998\n\nfinal &lt;- final[-6998,]\nmax(final$Date)\n\n[1] \"2022-12-29\"\n\n\nWe will save this data set as it is.\n\nreadr::write_csv(final, \"AGO_Cleaned_Data.csv\")\n\nThen we can just call this cleaned data from our folder.\n\nclean_data &lt;- read_csv(\"AGO_Cleaned_Data.csv\")"
  },
  {
    "objectID": "Data_Challenge.html#visualisation",
    "href": "Data_Challenge.html#visualisation",
    "title": "AGO_Data_Challenge",
    "section": "1.4 Visualisation",
    "text": "1.4 Visualisation\nAfter the dataset has been cleaned, we can now focus on basic visualisation. This is also done in our Shiny application but here are a few examples.\nFirst, we will assign a year column to the dataset.\n\nclean_data$Year &lt;- as.numeric(format(clean_data$Date, \"%Y\"))\n\n\n1.4.1 Scatterplot for Agency Procurement by Type and Year\n\nfiltered_data &lt;- clean_data %&gt;%\n  filter(Agency == \"Agency for Cultural Preservation and Heritage\" & \n           `Procurement Type` == \"ITQ\" & \n           Year == 2017)\n\np &lt;- ggplot(filtered_data, \n            aes(x = Date, y = `Awarded Amount`, \n                text = `Procurement Description`)) +\n        geom_jitter(width = 0.2, height = 0, alpha = 0.6) + \n        labs(title = paste(\"Scatter Plot for Agency For Cultural Preservation and Heritage in 2017\"), \n             x = \"Date\", \n             y = \"Amount\") + \n        theme_economist()\n      \nggplotly(p, tooltip = c(\"x\", \"y\", \"text\"))\n\n\n\n\n\n\n\n1.4.2 Supplier Awarded Amount\n\ndata_set &lt;- clean_data %&gt;%\n  filter(`Procurement Description` == \"Energy-efficient lighting installation and maintenance.\")\n    \nyearly_data &lt;- data_set %&gt;%\n  group_by(Year, Supplier) %&gt;%\n  summarise(TotalAmount = sum(`Awarded Amount`, na.rm = TRUE))\n    \ntable_data &lt;- yearly_data %&gt;%\n  pivot_wider(names_from = Year, values_from = TotalAmount, values_fill = list(TotalAmount = 0))\n    \ndatatable(table_data)\n\n\n\n\n\n\n\n\n1.4.3 Agency’s Procurement Amount\nSimilar to the above but done for Agency\n\ndata_set &lt;- clean_data %&gt;%\n  filter(`Procurement Description` == \"Energy-efficient lighting installation and maintenance.\")\n    \nyearly_data &lt;- data_set %&gt;%\n  group_by(Year, Agency) %&gt;%\n  summarise(TotalAmount = sum(`Awarded Amount`, na.rm = TRUE))\n    \ntable_data &lt;- yearly_data %&gt;%\n  pivot_wider(names_from = Year, values_from = TotalAmount, values_fill = list(TotalAmount = 0))\n    \ndatatable(table_data)\n\n\n\n\n\n\n\n# Total amount by agency\nagency_data &lt;- clean_data %&gt;%\n  group_by(Agency) %&gt;%\n  summarise(TotalAmount = sum(`Awarded Amount`, na.rm = TRUE)) %&gt;%\n  arrange(TotalAmount)\n# Total no. of procurement by agency\nproc_per_agency &lt;- clean_data %&gt;%\n  group_by(Agency)%&gt;%\n  summarize(Count = n())%&gt;%\n  arrange(desc(Count))\njoined_data &lt;- agency_data %&gt;%\n  inner_join(proc_per_agency, by = \"Agency\") %&gt;%\n  mutate(AverageAmount = round(TotalAmount/Count,)) %&gt;%\n  arrange(AverageAmount)\n\nggplot(joined_data, aes(y=reorder(Agency,TotalAmount), x= TotalAmount,fill = -AverageAmount)) +\n  geom_bar(stat=\"identity\") + \n  geom_text(aes(label=TotalAmount),hjust = 1.1, size =3, col = \"white\") +\n  labs(x = \"Total Amount\", y = \"Agency\") +\n  theme(axis.text.x = element_text(size = 5))"
  },
  {
    "objectID": "Data_Challenge.html#benfords-law",
    "href": "Data_Challenge.html#benfords-law",
    "title": "AGO_Data_Challenge",
    "section": "2.1 Benford’s Law",
    "text": "2.1 Benford’s Law\nAs there were many agencies and various description types, a Shiny application was created to consolidate our analysis findings and visualisation.\nThe key package and code used for this analysis is:\n\nlibrary(benford.analysis)\nbenford(data = XXX, number.of.digits = 1))\n\nWe referenced to Nigrini, & Mittermaier, L. (1997). The use of Benford’s Law as an aid in analytical procedures. Auditing : a Journal of Practice and Theory, 16(2), 52–67.  in understanding the use of this technique in identifying potential suspicious procurements.\nAn example of how the analysis is run is as follows:\n\nlibrary(benford.analysis)\n# Filter to respective agency\nfiltered_data &lt;- clean_data %&gt;%\n      filter(Agency == \"Agency for Cultural Preservation and Heritage\")\n             \n    \n# Do Benford's analysis on the filtered data\nbenford_result &lt;- benford(filtered_data$`Awarded Amount`, number.of.digits = 1)\nplot(benford_result)\n\n\n\n\nThe team noted that Benford’s law should follow a decreasing function as indicated in the red line and took the leading number with the highest deviation away for further investigations. This is done on several other agencies as well and is as indicated in the written report section.\n\n2.1.1 Duplication Test\nThe intuition to check for duplicates came from the Benford’s Law analysis on the Agency for Culture and Heritage as we zoomed in on the leading number, 9.\nThe test done here is on the whole dataset. Using duplicated(), we manage to find several transactions which were in the same amount.\n\n# Find the index of duplicated values\nduplicated_index &lt;- which(duplicated(clean_data$`Awarded Amount`) | duplicated(clean_data$`Awarded Amount`, fromLast = TRUE))\nlist_of_duplicate_amounts &lt;- clean_data[duplicated_index,]\n\n\nduplicated_index &lt;- which(duplicated(list_of_duplicate_amounts[, c(\"Awarded Amount\", \"Agency\", \"Supplier\")]) | \n                         duplicated(list_of_duplicate_amounts[, c(\"Awarded Amount\", \"Agency\", \"Supplier\" )], fromLast = TRUE))\n\nduplicate_amount &lt;- list_of_duplicate_amounts[duplicated_index,]\n\nFrom the above, we see entries that are duplicated for whether the amount is similar and whether the agency or suppliers that claims were made under are the same. Due to the categorisation of the claims amount, the value of an awarded amount can be split into two procurement claim to evade the ITT categorisation checks. These procurement claims should be highlighted as potential fraudulant activities.\n\n\n2.1.2 Claims made within a month of a similar procurement\nSeeing how claims were made within the same day, the team then identified procurements made 30days apart within the same agency for the same descriptionl.\n\nlibrary(dplyr)\n\nsorted_data &lt;- clean_data %&gt;%\n  arrange(`Procurement Description`, Agency, Supplier, Date)\n\nunique_full_rows_alldata &lt;- clean_data[0,]\n\n# Initialize a vector to track added codes\nadded_codes &lt;- integer(0)\n\n# Iterate over the rows of the sorted dataframe\nfor(i in 1:(nrow(sorted_data) - 1)) {\n  if(!sorted_data$`S/N`[i] %in% added_codes) {\n    for(j in (i+1):nrow(sorted_data)) {\n      \n      # Check if they are the same Task and Supplier and within 30 days\n      if(sorted_data$`Procurement Description`[i] == sorted_data$`Procurement Description`[j] && \n         sorted_data$Supplier[i] == sorted_data$Supplier[j] && \n         sorted_data$Agency[i] == sorted_data$Agency[j] &&\n         abs(as.numeric(difftime(sorted_data$Date[j], sorted_data$Date[i], units = \"days\"))) &lt;= 30) {\n        \n        # Add these rows to unique_full_rows and record the codes as added\n        unique_full_rows_alldata &lt;- rbind(unique_full_rows_alldata, sorted_data[i,], sorted_data[j,])\n        added_codes &lt;- c(added_codes, sorted_data$`S/N`[i], sorted_data$`S/N`[j])\n        \n        break # We found a pair for the ith entry, so no need to continue the inner loop\n      }\n    }\n  }\n}\n\n# If needed, sort the result again by Task, Supplier, and Date\nunique_full_rows_alldata &lt;- unique_full_rows_alldata %&gt;%\n  arrange(`Procurement Description`, Supplier, Date)\n\ndatatable(unique_full_rows_alldata)"
  },
  {
    "objectID": "Data_Challenge.html#outlier-test",
    "href": "Data_Challenge.html#outlier-test",
    "title": "AGO_Data_Challenge",
    "section": "2.2 Outlier Test",
    "text": "2.2 Outlier Test\n\noutliers_per_desc &lt;- clean_data %&gt;%   \n  group_by(`Procurement Description`) %&gt;%   \n  summarize(count = n(),             \n            upper_limit = quantile(abs(`Awarded Amount`))[4],             \n            iqr = IQR(abs(`Awarded Amount`))) %&gt;%   \n  mutate(upper_extreme_outlier = upper_limit + 1.5 * iqr)  %&gt;%   \n  select(Procurement.Description, upper_limit, iqr, upper_extreme_outlier)\n\nclean_data %&gt;%  \n  left_join(outliers_per_desc, by = 'Procurement Description') %&gt;%    \n  filter(`Awarded Amount` &gt;= upper_extreme_outlier) %&gt;%   \n  select(`Procurement Code`, Agency, `Awarded Amount`, `Procurement Description`, upper_extreme_outlier) %&gt;%  \n  slice_max(order_by = `Awarded Amount`, n=10) %&gt;%  \n  arrange(`Procurement Code`)"
  },
  {
    "objectID": "Data_Challenge.html#round-number-test",
    "href": "Data_Challenge.html#round-number-test",
    "title": "AGO_Data_Challenge",
    "section": "2.3 Round Number Test",
    "text": "2.3 Round Number Test\n\nBy 100\n\n\nround_numbers &lt;- clean_data %&gt;%\n  mutate(t_round_1000 = `Awarded Amount` %% 100 == 0) %&gt;%\n  filter_at(vars(starts_with(\"t_round\")), any_vars(.)) %&gt;%\n  select(`Procurement Code`, `Procurement Description`, Agency, Date, `Awarded Amount`, Supplier, starts_with(\"t_round\")) \n\n round_numbers %&gt;%\n  filter(t_round_1000 == TRUE)%&gt;%\n  group_by(`Procurement Description`)%&gt;%\n  summarise(Count = n())%&gt;% \n   arrange(desc(Count))\n\n# A tibble: 20 × 2\n   `Procurement Description`                                      Count\n   &lt;chr&gt;                                                          &lt;int&gt;\n 1 Energy-efficient lighting installation and maintenance.            9\n 2 Fire safety system installation and maintenance.                   7\n 3 Health and safety compliance management and training.              7\n 4 Tenant communication and customer service assistance.              6\n 5 Building maintenance and repairs.                                  5\n 6 Waste management and recycling program implementation.             5\n 7 Emergency response and disaster recovery planning.                 4\n 8 Furniture and equipment maintenance and inventory tracking.        4\n 9 Indoor air quality monitoring and improvement measures.            4\n10 Space planning and utilization optimization strategies.            4\n11 Comprehensive janitorial services and cleanliness maintenance.     3\n12 Expert landscaping and groundskeeping solutions.                   3\n13 Pest control services for a pest-free environment.                 3\n14 Building automation and smart technology integration.              2\n15 HVAC system maintenance and climate control optimization.          2\n16 Parking management and traffic control solutions.                  2\n17 Renovation and remodeling project management.                      2\n18 24/7 security and access control management.                       1\n19 Cleaning supplies and consumables procurement and management.      1\n20 Energy-efficient systems and consumption monitoring.               1\n\n\n\nBy 1,000\n\n\nround_numbers &lt;- clean_data %&gt;%\n  mutate(t_round_1000 = `Awarded Amount` %% 1000 == 0) %&gt;%\n  filter_at(vars(starts_with(\"t_round\")), any_vars(.)) %&gt;%\n  select(`Procurement Code`, `Procurement Description`, Agency, Date, `Awarded Amount`, Supplier, starts_with(\"t_round\")) \n\nround_numbers %&gt;%\n  filter(t_round_1000 == TRUE)%&gt;%\n  group_by(`Procurement Description`)%&gt;%\n  summarise(Count = n())%&gt;% \n   arrange(desc(Count))\n\n# A tibble: 4 × 2\n  `Procurement Description`                                      Count\n  &lt;chr&gt;                                                          &lt;int&gt;\n1 Comprehensive janitorial services and cleanliness maintenance.     2\n2 Building automation and smart technology integration.              1\n3 Energy-efficient lighting installation and maintenance.            1\n4 Furniture and equipment maintenance and inventory tracking.        1"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About our group",
    "section": "",
    "text": "…\n\n\n\n…\n\n\n\n…"
  },
  {
    "objectID": "about.html#member-1-teo-jun-hao",
    "href": "about.html#member-1-teo-jun-hao",
    "title": "About our group",
    "section": "",
    "text": "…"
  },
  {
    "objectID": "about.html#member-2-valerie",
    "href": "about.html#member-2-valerie",
    "title": "About our group",
    "section": "",
    "text": "…"
  },
  {
    "objectID": "about.html#member-3-emma",
    "href": "about.html#member-3-emma",
    "title": "About our group",
    "section": "",
    "text": "…"
  },
  {
    "objectID": "Written_Report.html#benfords-law",
    "href": "Written_Report.html#benfords-law",
    "title": "Written_Report",
    "section": "2.1 Benford’s Law",
    "text": "2.1 Benford’s Law"
  },
  {
    "objectID": "Written_Report.html#outlier-test",
    "href": "Written_Report.html#outlier-test",
    "title": "Written_Report",
    "section": "2.2 Outlier Test",
    "text": "2.2 Outlier Test"
  },
  {
    "objectID": "Written_Report.html#rounding-test",
    "href": "Written_Report.html#rounding-test",
    "title": "Written_Report",
    "section": "2.3 Rounding Test",
    "text": "2.3 Rounding Test"
  }
]